    template<typename Container>
    void fordJohnsonSort(Container& c) {
        if (c.size() <= 1)
            return;

        // Store pairs along with their original index to find the first loser later
        std::vector<std::pair<std::pair<int, int>, size_t> > indexedPairs;
        bool hasOdd = c.size() % 2 == 1;
        int oddElement = hasOdd ? c.back() : -1;

        for (size_t i = 0; i + 1 < c.size(); i += 2) {
            // Store pair (winner, loser) and its pair index
            if (c[i] > c[i + 1])
                indexedPairs.push_back(std::make_pair(std::make_pair(c[i], c[i + 1]), i / 2));
            else
                indexedPairs.push_back(std::make_pair(std::make_pair(c[i + 1], c[i]), i / 2));
        }


        // Extract winners for recursive sorting
        // We sort based on the winner value, but need the original pair index later
        std::vector<std::pair<int, size_t> > indexedWinners;
        for (size_t i = 0; i < indexedPairs.size(); ++i) {
            indexedWinners.push_back(std::make_pair(indexedPairs[i].first.first, indexedPairs[i].second));
        }

        // we only need the smallest winner to find the first loser
        std::vector<int> winners;
        for (size_t i = 0; i < indexedPairs.size(); ++i) {
            winners.push_back(indexedPairs[i].first.first);
        }
        fordJohnsonSort(winners); // Recursively sort the winner values

        // Build main chain starting with sorted winners
        Container mainChain;
        for(size_t i = 0; i < winners.size(); ++i) {
            mainChain.push_back(winners[i]);
        }

        // Keep track of which original pair indices (0 to pairs.size()-1) have had their losers inserted
        std::vector<bool> inserted(indexedPairs.size(), false);

        // --- Insertion Phase ---

        // 1. Insert the first loser (paired with the smallest winner)
        // Find the original pair index corresponding to the smallest winner (winners[0])
        int smallestWinner = winners[0];
        size_t firstLoserPairIdx = 0; // This will be the index in the `indexedPairs` vector
        int firstLoserValue = -1;

        for (size_t i = 0; i < indexedPairs.size(); ++i) {
            if (indexedPairs[i].first.first == smallestWinner) {
                 firstLoserPairIdx = indexedPairs[i].second; // Get the *original* pair index (0 to N/2-1)
                 firstLoserValue = indexedPairs[i].first.second;
                break; // Found the pair with the smallest winner
            }
        }

        mainChain.insert(mainChain.begin(), firstLoserValue);
        inserted[firstLoserPairIdx] = true; // Mark the original pair index as inserted

        // 2. Insert remaining losers using Jacobsthal sequence ordering
        // The sequence of *original pair indices* to insert *after* the first is
        // derived from Jacobsthal numbers: J(1)-1, then J(2)-1, J(2)-2, ..., J(1), ... (0-based)
        // Which is indices: 0, then 2, 1, then 4, 3, ...

        // Generate Jacobsthal sequence J(1), J(2), J(3)...
        std::vector<size_t> jacobSeq = generateJacobsthalSeq(indexedPairs.size()); // J(1), J(2), ...

        // Keep track of which indices from the *Jacobsthal sequence* we have processed
        // This helps generate the 0, 2, 1, 4, 3, ... order
        std::vector<size_t> insertionOrderIndices;
        size_t currentJacobstalIndex = 1; // Start with J(1) = 1

        while(true) {
             size_t J_k_minus_1 = (currentJacobstalIndex >= 2) ? jacobSeq[currentJacobstalIndex - 2] : 0; // J(k-1), J(0)=0
             size_t J_k = jacobSeq[currentJacobstalIndex - 1]; // J(k)

             // Add indices from J(k)-1 down to J(k-1) (0-based original pair indices)
             // Ensure indices are within the bounds of indexedPairs (0 to size()-1)
             size_t upper_bound_1based = std::min((size_t)indexedPairs.size(), J_k);
             size_t lower_bound_1based = J_k_minus_1 + 1;

             bool added_indices_in_this_block = false;
             if (upper_bound_1based >= lower_bound_1based) { // Check if the range is valid
                for (size_t originalPairIndex = upper_bound_1based - 1; ; --originalPairIndex) {
                    if (originalPairIndex < indexedPairs.size()) { // Ensure index is valid
                         insertionOrderIndices.push_back(originalPairIndex);
                         added_indices_in_this_block = true;
                    }
                     if (originalPairIndex == lower_bound_1based - 1 || originalPairIndex == 0) break; // Stop condition for decreasing loop
                }
             }

             currentJacobstalIndex++;
             if (!added_indices_in_this_block && J_k >= indexedPairs.size()) {
                 // If no indices were added in the last block and J_k is already >= size, we likely covered all relevant indices
                 break;
             }
             if (currentJacobstalIndex > jacobSeq.size() + 2) break; // Safety break
        }


        // Now iterate through the generated insertion order and insert losers
        for (size_t i = 0; i < insertionOrderIndices.size(); ++i) {
            size_t originalPairIndex = insertionOrderIndices[i];

             // Ensure index is valid (should be if generator is correct, but safety)
            if (originalPairIndex >= indexedPairs.size()) continue;

            if (!inserted[originalPairIndex]) {
                int loser = indexedPairs[originalPairIndex].first.second; // Loser value
                int winner = indexedPairs[originalPairIndex].first.first; // Winner value

                // Find position of winner in main chain
                 typename Container::iterator winnerPos = std::find(mainChain.begin(), mainChain.end(), winner);

                // Insert loser before its winner using binary search on the sorted sub-sequence
                 typename Container::iterator insertPos = binarySearchInsert(mainChain.begin(), winnerPos, loser);
                mainChain.insert(insertPos, loser);

                inserted[originalPairIndex] = true; // Mark as inserted
            }
        }

        // 3. Insert any remaining uninserted losers (covers indices not reached by Jacobsthal sequence logic)
        // This loop is a safety net and might not be strictly necessary if Jacobsthal logic is perfect
        // and covers all indices up to pairs.size()-1, but it's harmless.
        for (size_t i = 0; i < indexedPairs.size(); ++i) {
             if (!inserted[i]) {
                 int loser = indexedPairs[i].first.second; // Loser value
                 int winner = indexedPairs[i].first.first; // Winner value

                  typename Container::iterator winnerPos = std::find(mainChain.begin(), mainChain.end(), winner);
                  typename Container::iterator insertPos = binarySearchInsert(mainChain.begin(), winnerPos, loser);
                 mainChain.insert(insertPos, loser);
                 inserted[i] = true;
             }
         }


        // 4. Insert odd if exists
        if (hasOdd) {
            typename Container::iterator insertPos = binarySearchInsert(mainChain.begin(), mainChain.end(), oddElement);
            mainChain.insert(insertPos, oddElement);
        }

        c = mainChain; // Replace the original container with the sorted one
    }